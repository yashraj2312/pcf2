import { Component, OnInit } from '@angular/core';
import { UPost } from 'src/app/Unauthenticated/shared/UPost.model';
import { HttpClient } from '@angular/common/http';
import { CrudService } from 'src/app/Unauthenticated/shared/crud.service';
import { AuthService } from 'src/app/Authentication/shared/auth.service';
import { ACrudService } from 'src/app/Authentication/shared/acrud.service';
import { map } from 'rxjs/operators';
import { Router, ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs/internal/Subscription';

@Component({
  selector: 'app-user-post',
  templateUrl: './user-post.component.html',
  styleUrls: ['./user-post.component.css']
})
export class UserPostComponent implements OnInit {
  selectedIndex: number=0;
  type=['all','public','private']

  private puSub: Subscription;
  private prSub: Subscription
  private allSub: Subscription;

  allpost: UPost[] = [];
  public_post: UPost[] = [];
  private_post: UPost[] = [];
  isFetching = false;
  isAll = true;
  isPublic = false;
  isPrivate = false;
  constructor(
    private router: Router, private r:ActivatedRoute,
    private http: HttpClient,
    private ucrud: CrudService,
    private authService: AuthService,
    private acrud: ACrudService
  ) { }

  ngOnInit(): void {
    this.acrud.getAllData()
    this.acrud.getDemo1();
    this.acrud.getDemo2()
    console.log("oninitnt methid")

 
   this.allSub= this.acrud.all.subscribe(d=>{
      console.log("####################",d)
    })

 
  }
  getAllPosts() {
   console.log("all post")
    this.isAll = true;
    this.isPublic = false;
    this.isPrivate = false;
    this.allpost = this.private_post.concat(this.public_post)
    this.acrud.sortDesecending(this.allpost)
    console.log(this.allpost)
    console.log(this.isAll,this.isPrivate,this.isPublic)
  }
  /* subscribe(data=>{
    console.log(data)
  })
} */


  getPublicPosts() {
    console.log("public post")
    this.router.navigate(["../public"], { relativeTo: this.r });
    console.log("public post")
    this.isAll = false;
    this.isPublic = true;
    this.isPrivate = false;
    this.isFetching = true;
    this.acrud.getPublicPost()
      .pipe(
        map(responseData => {
          const postsArray: UPost[] = [];
          for (const key in responseData) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseData[key] });
            }
          }
          return postsArray;
        })
      )
      .subscribe(posts => {
        this.isFetching = false;
        this.public_post = posts;
        this.allpost = this.allpost.concat(this.public_post)
        console.log(this.public_post)
        console.log(this.isAll,this.isPrivate,this.isPublic)
      });
    
      
  }
  getPriavtePosts() {
    console.log("private post")
   this.router.navigate(["../private"], { relativeTo: this.r });
    console.log("priiate post")
    this.isAll = false;
    this.isPublic = false;
    this.isPrivate = true;
    this.isFetching = true;
    this.acrud.getPrivatePost()
      .pipe(
        map(responseData => {
          const postsArray: UPost[] = [];
          for (const key in responseData) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseData[key] });
            }
          }
          return postsArray;
        })
      )
      .subscribe(posts => {
        this.isFetching = false;
        this.private_post = posts;
        this.allpost = this.allpost.concat(this.private_post)
     
        console.log(this.private_post)
        console.log(this.isAll,this.isPrivate,this.isPublic)
      }); 

  }


  ngOnDestroy() {
    this.allSub.unsubscribe();
  }
/* 
  OnChangeRoute(id){
console.log(this.route)

    this.router.navigate([ id ], { relativeTo: this.route });
  } */
}
